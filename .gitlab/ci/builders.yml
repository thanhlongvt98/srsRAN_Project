#
# Copyright 2013-2024 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "17"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/ci/tools
    ref: "17"
    file: .gitlab/ci-shared/tools/docker.yml
  - project: softwareradiosystems/ci/tools
    ref: "17"
    file: .gitlab/ci-shared/tools/python.yml
  - local: .gitlab/ci/builders/version.yml
  - local: .gitlab/ci/src_cache.yml

################################################################################
# Stages
################################################################################
stages:
  - ci
  - dependencies
  - publish
  - alt registries
  - manifest

################################################################################
## CI
################################################################################
tox python in builder:
  stage: ci
  extends: .tox
  rules:
    - if: $ON_MR
      changes:
        paths:
          - .gitlab/ci/builders/**/*.py
  variables:
    PY_DIR: .gitlab/ci/builders

################################################################################
# UHD builder
################################################################################
ubuntu-uhd-builder:
  stage: dependencies
  image: ubuntu:${os_version}
  rules:
    - if: $ON_MR
  tags:
    - on-prem-${arch_name}
  variables:
    os_version: ""
    arch_name: ""
    uhd_version: ""
    GIT_STRATEGY: none
    KUBERNETES_CPU_REQUEST: 3
    KUBERNETES_CPU_LIMIT: 3
    KUBERNETES_MEMORY_REQUEST: 7Gi
    KUBERNETES_MEMORY_LIMIT: 7Gi
  before_script:
    - TZ=Europe/Madrid && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

    # Download existing package in the registry, if exists
    - |
      download_from_registry() {
        DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends curl apt-transport-https ca-certificates xz-utils
        
        cd ${CI_PROJECT_DIR}
        http_code=$(curl -w "%{http_code}" --header "PRIVATE-TOKEN: $CODEBOT_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/uhd/ubuntu-${os_version}-${arch_name}-${uhd_version}/uhd.tar.gz" -o output.tar.gz)
        if [[ $http_code == "200" ]]; then
          tar -xf output.tar.gz
          return 0
        else
          return 1
        fi
      }

    # Install dependencies and compile
    - |
      build_uhd() {
        DEBIAN_FRONTEND=noninteractive apt-get update &&  apt-get install -y --no-install-recommends \
          curl apt-transport-https ca-certificates xz-utils \
          cmake build-essential pkg-config \
          libboost-all-dev libusb-1.0-0-dev doxygen \
          python3-docutils python3-mako python3-numpy python3-setuptools python3-requests

        cd /tmp
        curl -LJO "https://github.com/EttusResearch/uhd/archive/refs/tags/v${uhd_version}.tar.gz"
        tar -xf "uhd-${uhd_version}.tar.gz"
        cd "uhd-${uhd_version}/host" && mkdir -p build && cd build
        cmake -DENABLE_LIBUHD=On -DCMAKE_INSTALL_PREFIX="/opt/uhd/${uhd_version}" .. || cmake -DENABLE_LIBUHD=On -DCMAKE_INSTALL_PREFIX="/opt/uhd/${uhd_version}" ..
        make -j${KUBERNETES_CPU_REQUEST}
        make install

        mkdir -p ${CI_PROJECT_DIR}/.gitlab/ci/builders/uhd
        cp -r /opt/uhd/${uhd_version} ${CI_PROJECT_DIR}/.gitlab/ci/builders/uhd/${uhd_version}
      }

    # Publish compiled version to the registry
    - |
      publish_to_registry() {
        cd ${CI_PROJECT_DIR}
        tar -czf uhd.tar.gz .gitlab/ci/builders/uhd/${uhd_version}
        curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file uhd.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/uhd/ubuntu-${os_version}-${arch_name}-${uhd_version}/uhd.tar.gz"
      }
  script:
    - |
      if download_from_registry; then
        echo "Reusing existing package"
      else
        echo "Not found on the package registry. It will be compiled and published"
        build_uhd
        publish_to_registry
      fi
  artifacts:
    paths:
      - .gitlab/ci/builders/uhd
    expire_in: 8 hours
  parallel:
    matrix:
      - os_version: "20.04"
        arch_name: [amd64, arm64]
        uhd_version: ["4.6.0.0", "4.4.0.0", "4.3.0.0", "4.1.0.5"] # uhd 3.15.0.0 default
      - os_version: "22.04"
        arch_name: [amd64, arm64]
        uhd_version: ["4.6.0.0", "4.4.0.0", "4.3.0.0"] # "4.1.0.5" default
      - os_version: "23.10"
        arch_name: [amd64, arm64]
        uhd_version: ["4.6.0.0"] # "4.4.0.0" default
      # - os_version: "24.04"
      #   arch_name: [amd64, arm64]
      #   uhd_version: [] # "4.6.0.0" default

################################################################################
# DPDK builder
################################################################################
ubuntu-dpdk-builder:
  stage: dependencies
  image: ubuntu:${os_version}
  rules:
    - if: $ON_MR
  tags:
    - on-prem-${arch_name}
  variables:
    os_version: ""
    arch_name: ""
    dpdk_version: ""
    GIT_STRATEGY: none
    KUBERNETES_CPU_REQUEST: 6
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 12Gi
    KUBERNETES_MEMORY_LIMIT: 12Gi
  before_script:
    - TZ=Europe/Madrid && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

    # Download existing package in the registry, if exists
    - |
      download_from_registry() {
        DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends curl apt-transport-https ca-certificates xz-utils
        
        cd ${CI_PROJECT_DIR}
        http_code=$(curl -w "%{http_code}" --header "PRIVATE-TOKEN: $CODEBOT_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/dpdk/ubuntu-${os_version}-${arch_name}-${dpdk_version}/dpdk.tar.gz" -o output.tar.gz)
        if [[ $http_code == "200" ]]; then
          tar -xf output.tar.gz
          return 0
        else
          return 1
        fi
      }

    # Install dependencies and compile
    - |
      build_dpdk() {
        DEBIAN_FRONTEND=noninteractive apt-get update &&  apt-get install -y --no-install-recommends \
          curl apt-transport-https ca-certificates xz-utils \
          python3-pip ninja-build g++ git build-essential pkg-config libnuma-dev libfdt-dev pciutils
        
        export PIP_EXTRA_INDEX_URL=""
        pip3 install meson pyelftools || pip3 install --break-system-packages meson pyelftools 

        cd /tmp
        curl -L "https://fast.dpdk.org/rel/dpdk-${dpdk_version}.tar.xz" | tar -xJ
        cd dpdk*${dpdk_version}
        meson build --prefix "/opt/dpdk/${dpdk_version}"
        ninja -j${KUBERNETES_CPU_REQUEST} -C build install

        mkdir -p ${CI_PROJECT_DIR}/.gitlab/ci/builders/dpdk
        cp -r /opt/dpdk/${dpdk_version} ${CI_PROJECT_DIR}/.gitlab/ci/builders/dpdk/${dpdk_version}
      }

    # Publish compiled version to the registry
    - |
      publish_to_registry() {
        cd ${CI_PROJECT_DIR}
        tar -czf dpdk.tar.gz .gitlab/ci/builders/dpdk/${dpdk_version}
        curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file dpdk.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/dpdk/ubuntu-${os_version}-${arch_name}-${dpdk_version}/dpdk.tar.gz"
      }
  script:
    - |
      if download_from_registry; then
        echo "Reusing existing package"
      else
        echo "Not found on the package registry. It will be compiled and published"
        build_dpdk
        publish_to_registry
      fi
  artifacts:
    paths:
      - .gitlab/ci/builders/dpdk
    expire_in: 8 hours
  parallel:
    matrix:
      - os_version: "20.04"
        arch_name: [amd64, arm64]
        dpdk_version: ["21.08", "22.11.3", "23.11"]
      - os_version: "22.04"
        arch_name: [amd64, arm64]
        dpdk_version: ["21.08", "22.11.3", "23.11"]
      - os_version: "23.10"
        arch_name: [amd64, arm64]
        dpdk_version: ["22.11.3", "23.11"]
      - os_version: "24.04"
        arch_name: [amd64, arm64]
        dpdk_version: ["23.11"]

################################################################################
# Common
################################################################################
.image-build-publish:
  extends: .docker-builder
  stage: publish
  variables:
    OS_FAMILY: none
    OS_NAME: none
    OS_VERSION: none
    MULTI_ARCH_BUILD: "false"
    RHEL_CT_VERSION: none
    MODE: publish
  tags:
    - $PLATFORM
  rules:
    - if: $ON_MR
  before_script:
    - !reference [.fetch_src_cache, before_script]
    - !reference [.fetch_src_cache, script]
    - |
      export NAME=builder-$OS_NAME-$OS_VERSION
      export VERSION=${DOCKER_BUILDER_VERSION}-${PLATFORM}
      export CONTEXT=.gitlab/ci/builders
      export DOCKERFILE=$CONTEXT/$OS_FAMILY
      export BUILD_ARGS="OS_NAME=${OS_NAME};VERSION=${OS_VERSION};TAG=${VERSION};RHEL_VERSION=${RHEL_CT_VERSION};CR_REGISTRY_URI=${CR_REGISTRY_URI}"
    - |
      mkdir -p $CONTEXT/uhd $CONTEXT/dpdk  # make sure those jobs that don't need UHD can copy something
      ls -lah $CONTEXT/uhd $CONTEXT/dpdk
  needs:
    - builder version
  cache:
    - !reference [.fetch_src_cache, cache]

.alternative-tag:
  extends: .docker copy
  stage: alt registries
  variables:
    OS_NAME: none
    OS_VERSION: none
    VERSION: $DOCKER_BUILDER_VERSION
    ALT_REGISTRY: ${GITLAB_REGISTRY_URI}
  script:
    - |
      skopeo copy \
        docker://${CR_REGISTRY_URI}${CI_PROJECT_NAMESPACE#'softwareradiosystems'}/${CI_PROJECT_NAME}/builder-$OS_NAME-$OS_VERSION:${VERSION} \
        docker://${ALT_REGISTRY}${CI_PROJECT_NAMESPACE#'softwareradiosystems'}/${CI_PROJECT_NAME}/builder-$OS_NAME-$OS_VERSION:${VERSION}

.manifest:
  extends: .docker manifest
  stage: manifest
  variables:
    OS_NAME: none
    OS_VERSION: none
    VERSION: $DOCKER_BUILDER_VERSION
  before_script:
    - |
      export NAME=builder-${OS_NAME}-${OS_VERSION}

################################################################################
# Codechecker
################################################################################
image-build-publish [codechecker]:
  extends: .image-build-publish
  stage: publish
  variables:
    MULTI_ARCH_BUILD: none
    RHEL_CT_VERSION: none
    PLATFORM: amd64
    MODE: publish
  tags:
    - $PLATFORM
  rules:
    - if: $ON_MR
  before_script:
    - !reference [.fetch_src_cache, before_script]
    - !reference [.fetch_src_cache, script]
    - |
      export NAME=codechecker
      export VERSION=$DOCKER_BUILDER_VERSION
      export CONTEXT=.gitlab/ci/builders
      export DOCKERFILE=$CONTEXT/codechecker
      export BUILD_ARGS="CR_REGISTRY_URI=${CR_REGISTRY_URI};CI_TOOLS_REPO=${CI_TOOLS_REPO}"
  needs:
    - builder version
  cache:
    - !reference [.fetch_src_cache, cache]

alternative-tag [codechecker]:
  extends: .docker copy
  stage: alt registries
  script:
    - |
      skopeo copy \
        docker://${CR_REGISTRY_URI}${CI_PROJECT_NAMESPACE#'softwareradiosystems'}/${CI_PROJECT_NAME}/codechecker:${DOCKER_BUILDER_VERSION} \
        docker://${GITLAB_REGISTRY_URI}${CI_PROJECT_NAMESPACE#'softwareradiosystems'}/${CI_PROJECT_NAME}/codechecker:${DOCKER_BUILDER_VERSION}
  needs:
    - builder version
    - image-build-publish [codechecker]

################################################################################
# Ubuntu 20.04
################################################################################
image-build-publish [ubuntu, 20.04, amd64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "20.04"
    PLATFORM: amd64
  needs:
    - builder version
    - job: ubuntu-uhd-builder
      parallel:
        matrix:
          - os_version: "20.04"
            arch_name: amd64
            uhd_version: ["4.6.0.0", "4.4.0.0", "4.3.0.0", "4.1.0.5"]
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "20.04"
            arch_name: amd64
            dpdk_version: ["21.08", "22.11.3", "23.11"]

alternative-tag [ubuntu, 20.04, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "20.04"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - image-build-publish [ubuntu, 20.04, amd64]

image-build-publish [ubuntu, 20.04, arm64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "20.04"
    PLATFORM: arm64
  needs:
    - builder version
    - job: ubuntu-uhd-builder
      parallel:
        matrix:
          - os_version: "20.04"
            arch_name: arm64
            uhd_version: ["4.6.0.0", "4.4.0.0", "4.3.0.0", "4.1.0.5"]
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "20.04"
            arch_name: arm64
            dpdk_version: ["21.08", "22.11.3", "23.11"]

alternative-tag [ubuntu, 20.04, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "20.04"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - image-build-publish [ubuntu, 20.04, arm64]

manifest [ubuntu, 20.04]:
  extends: .manifest
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "20.04"
  needs:
    - builder version
    - job: alternative-tag [ubuntu, 20.04, amd64]
      optional: false
    - job: alternative-tag [ubuntu, 20.04, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

################################################################################
# Ubuntu 22.04
################################################################################
image-build-publish [ubuntu, 22.04, amd64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "22.04"
    PLATFORM: amd64
  needs:
    - builder version
    - job: ubuntu-uhd-builder
      parallel:
        matrix:
          - os_version: "22.04"
            arch_name: amd64
            uhd_version: ["4.6.0.0", "4.4.0.0", "4.3.0.0"]
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "22.04"
            arch_name: amd64
            dpdk_version: ["21.08", "22.11.3", "23.11"]

alternative-tag [ubuntu, 22.04, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "22.04"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - image-build-publish [ubuntu, 22.04, amd64]

image-build-publish [ubuntu, 22.04, arm64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "22.04"
    PLATFORM: arm64
  needs:
    - builder version
    - job: ubuntu-uhd-builder
      parallel:
        matrix:
          - os_version: "22.04"
            arch_name: arm64
            uhd_version: ["4.6.0.0", "4.4.0.0", "4.3.0.0"]
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "22.04"
            arch_name: arm64
            dpdk_version: ["21.08", "22.11.3", "23.11"]

alternative-tag [ubuntu, 22.04, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "22.04"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - image-build-publish [ubuntu, 22.04, arm64]

manifest [ubuntu, 22.04]:
  extends: .manifest
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "22.04"
  needs:
    - builder version
    - job: alternative-tag [ubuntu, 22.04, amd64]
      optional: false
    - job: alternative-tag [ubuntu, 22.04, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

################################################################################
# Ubuntu 23.10
################################################################################
image-build-publish [ubuntu, 23.10, amd64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "23.10"
    PLATFORM: amd64
  needs:
    - builder version
    - job: ubuntu-uhd-builder
      parallel:
        matrix:
          - os_version: "23.10"
            arch_name: amd64
            uhd_version: ["4.6.0.0"] # "4.4.0.0" default
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "23.10"
            arch_name: amd64
            dpdk_version: ["22.11.3", "23.11"]

alternative-tag [ubuntu, 23.10, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "23.10"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - image-build-publish [ubuntu, 23.10, amd64]

image-build-publish [ubuntu, 23.10, arm64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "23.10"
    PLATFORM: arm64
  needs:
    - builder version
    - job: ubuntu-uhd-builder
      parallel:
        matrix:
          - os_version: "23.10"
            arch_name: arm64
            uhd_version: ["4.6.0.0"] # "4.4.0.0" default
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "23.10"
            arch_name: arm64
            dpdk_version: ["22.11.3", "23.11"]

alternative-tag [ubuntu, 23.10, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "23.10"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - image-build-publish [ubuntu, 23.10, arm64]

manifest [ubuntu, 23.10]:
  extends: .manifest
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "23.10"
  needs:
    - builder version
    - job: alternative-tag [ubuntu, 23.10, amd64]
      optional: false
    - job: alternative-tag [ubuntu, 23.10, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

################################################################################
# Ubuntu 24.04
################################################################################
image-build-publish [ubuntu, 24.04, amd64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "24.04"
    PLATFORM: amd64
  needs:
    - builder version
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "24.04"
            arch_name: amd64
            dpdk_version: ["23.11"]

alternative-tag [ubuntu, 24.04, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "24.04"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - image-build-publish [ubuntu, 24.04, amd64]

image-build-publish [ubuntu, 24.04, arm64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: ubuntu
    OS_VERSION: "24.04"
    PLATFORM: arm64
  needs:
    - builder version
    - job: ubuntu-dpdk-builder
      parallel:
        matrix:
          - os_version: "24.04"
            arch_name: arm64
            dpdk_version: ["23.11"]

alternative-tag [ubuntu, 24.04, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "24.04"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - image-build-publish [ubuntu, 24.04, arm64]

manifest [ubuntu, 24.04]:
  extends: .manifest
  variables:
    OS_NAME: ubuntu
    OS_VERSION: "24.04"
  needs:
    - builder version
    - job: alternative-tag [ubuntu, 24.04, amd64]
      optional: false
    - job: alternative-tag [ubuntu, 24.04, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

################################################################################
# Debian
################################################################################
image-build-publish [debian]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: debian
    OS_NAME: debian
    PLATFORM: amd64
  parallel:
    matrix:
      - OS_VERSION: ["11", "12"]
        PLATFORM: [amd64, arm64]
  needs:
    - builder version

alternative-tag [debian, 11, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: debian
    OS_VERSION: "11"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - job: image-build-publish [debian]
      parallel:
        matrix:
          - OS_VERSION: "11"
            PLATFORM: amd64

alternative-tag [debian, 11, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: debian
    OS_VERSION: "11"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - job: image-build-publish [debian]
      parallel:
        matrix:
          - OS_VERSION: "11"
            PLATFORM: arm64

manifest [debian, 11]:
  extends: .manifest
  variables:
    OS_NAME: debian
    OS_VERSION: "11"
  needs:
    - builder version
    - job: alternative-tag [debian, 11, amd64]
      optional: false
    - job: alternative-tag [debian, 11, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

alternative-tag [debian, 12, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: debian
    OS_VERSION: "12"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - job: image-build-publish [debian]
      parallel:
        matrix:
          - OS_VERSION: "12"
            PLATFORM: amd64

alternative-tag [debian, 12, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: debian
    OS_VERSION: "12"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - job: image-build-publish [debian]
      parallel:
        matrix:
          - OS_VERSION: "12"
            PLATFORM: arm64

manifest [debian, 12]:
  extends: .manifest
  variables:
    OS_NAME: debian
    OS_VERSION: "12"
  needs:
    - builder version
    - job: alternative-tag [debian, 12, amd64]
      optional: false
    - job: alternative-tag [debian, 12, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

################################################################################
# Rhel 8
################################################################################
image-build-publish [rhel, 8, amd64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: rhel
    OS_NAME: rhel
    OS_VERSION: "8"
    RHEL_CT_VERSION: "2023.5_1.0.3"
    PLATFORM: amd64
  needs:
    - builder version

alternative-tag [rhel, 8, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: rhel
    OS_VERSION: "8"
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - image-build-publish [rhel, 8, amd64]

image-build-publish [rhel, 8, arm64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: rhel
    OS_NAME: rhel
    OS_VERSION: "8"
    RHEL_CT_VERSION: "2023.5_1.0.3"
    PLATFORM: arm64
  needs:
    - builder version

alternative-tag [rhel, 8, arm64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: rhel
    OS_VERSION: "8"
    VERSION: ${DOCKER_BUILDER_VERSION}-arm64
  needs:
    - builder version
    - image-build-publish [rhel, 8, arm64]

manifest [rhel, 8]:
  extends: .manifest
  variables:
    OS_NAME: rhel
    OS_VERSION: "8"
  needs:
    - builder version
    - job: alternative-tag [rhel, 8, amd64]
      optional: false
    - job: alternative-tag [rhel, 8, arm64]
      optional: false
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]

################################################################################
# Archlinux
################################################################################
image-build-publish [archlinux, latest, amd64]:
  extends:
    - .image-build-publish
  variables:
    OS_FAMILY: archlinux
    OS_NAME: archlinux
    OS_VERSION: latest
    PLATFORM: amd64
  needs:
    - builder version

alternative-tag [archlinux, latest, amd64]:
  extends:
    - .alternative-tag
  variables:
    OS_NAME: archlinux
    OS_VERSION: latest
    VERSION: ${DOCKER_BUILDER_VERSION}-amd64
  needs:
    - builder version
    - image-build-publish [archlinux, latest, amd64]

manifest [archlinux, latest]:
  extends: .docker copy
  stage: manifest
  variables:
    OS_NAME: archlinux
    OS_VERSION: latest
  script:
    - |
      skopeo copy \
        docker://${REGISTRY}${CI_PROJECT_NAMESPACE#'softwareradiosystems'}/${CI_PROJECT_NAME}/builder-$OS_NAME-$OS_VERSION:${DOCKER_BUILDER_VERSION}-amd64 \
        docker://${REGISTRY}${CI_PROJECT_NAMESPACE#'softwareradiosystems'}/${CI_PROJECT_NAME}/builder-$OS_NAME-$OS_VERSION:${DOCKER_BUILDER_VERSION}
  parallel:
    matrix:
      - REGISTRY: ["${CR_REGISTRY_URI}", "${GITLAB_REGISTRY_URI}"]
  needs:
    - builder version
    - job: alternative-tag [archlinux, latest, amd64]
      optional: false
